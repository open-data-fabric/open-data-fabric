{
  "$id": "http://open-data-fabric.github.com/schemas/MergeStrategy",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Merge strategy determines how newly ingested data should be combined with the data that already exists in the dataset.",
  "$defs": {
    "Append": {
      "description": "Append merge strategy.\n\nUnder this strategy new data will be appended to the dataset in its entirety, without any deduplication.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {}
    },
    "ChangelogStream": {
      "description": "Changelog stream merge strategy.\n\nThis is the native stream format for ODF that accurately describes the evolution of all event records including appends, retractions, and corrections as per RFC-015. No pre-processing except for format validation is done.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "primaryKey"
      ],
      "properties": {
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns that uniquely identify the record throughout its lifetime"
        }
      }
    },
    "Ledger": {
      "description": "Ledger merge strategy.\n\nThis strategy should be used for data sources containing ledgers of events. Currently this strategy will only perform deduplication of events using user-specified primary key columns. This means that the source data can contain partially overlapping set of records and only those records that were not previously seen will be appended.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "primaryKey"
      ],
      "properties": {
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns that uniquely identify the record throughout its lifetime"
        }
      }
    },
    "Snapshot": {
      "description": "Snapshot merge strategy.\n\nThis strategy can be used for data state snapshots that are taken periodically and contain only the latest state of the observed entity or system. Over time such snapshots can have new rows added, and old rows either removed or modified.\n\nThis strategy transforms snapshot data into an append-only event stream where data already added is immutable. It does so by performing Change Data Capture - essentially diffing the current state of data against the reconstructed previous state and recording differences as retractions or corrections. The Operation Type \"op\" column will contain:\n  - append (`+A`) when a row appears for the first time\n  - retraction (`-D`) when row disappears\n  - correction (`-C`, `+C`) when row data has changed, with `-C` event carrying the old value of the row and `+C` carrying the new value.\n\nTo correctly associate rows between old and new snapshots this strategy relies on user-specified primary key columns.\n\nTo identify whether a row has changed this strategy will compare all other columns one by one. If the data contains a column that is guaranteed to change whenever any of the data columns changes (for example a last modification timestamp, an incremental version, or a data hash), then it can be specified in `compareColumns` property to speed up the detection of modified rows.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "primaryKey"
      ],
      "properties": {
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns that uniquely identify the record throughout its lifetime."
        },
        "compareColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns to compared to determine if a row has changed between two snapshots."
        }
      }
    },
    "UpsertStream": {
      "description": "Upsert stream merge strategy.\n\nThis strategy should be used for data sources containing ledgers of insert-or-update and delete events. Unlike ChangelogStream the insert-or-update events only carry the new values, so this strategy will use primary key to re-classify the events into an append or a correction from/to pair, looking up the previous values.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "primaryKey"
      ],
      "properties": {
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns that uniquely identify the record throughout its lifetime"
        }
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/$defs/Append"
    },
    {
      "$ref": "#/$defs/Ledger"
    },
    {
      "$ref": "#/$defs/Snapshot"
    },
    {
      "$ref": "#/$defs/ChangelogStream"
    },
    {
      "$ref": "#/$defs/UpsertStream"
    }
  ]
}