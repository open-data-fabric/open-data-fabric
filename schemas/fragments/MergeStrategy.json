{
  "$id": "http://open-data-fabric.github.com/schemas/MergeStrategy",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Merge strategy determines how newly ingested data should be combined with the data that already exists in the dataset.",
  "$defs": {
    "Append": {
      "description": "Append merge strategy.\n\nUnder this strategy polled data will be appended in its original form to the already ingested data without modifications.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {}
    },
    "Ledger": {
      "description": "Ledger merge strategy.\n\nThis strategy should be used for data sources containing append-only event\nstreams. New data dumps can have new rows added, but once data already\nmade it into one dump it never changes or disappears.\n\nA system time column will be added to the data to indicate the time\nwhen the record was observed first by the system.\n\nIt relies on a user-specified primary key columns to identify which records\nwere already seen and not duplicate them.\n\nIt will always preserve all columns from existing and new snapshots, so\nthe set of columns can only grow.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "primaryKey"
      ],
      "properties": {
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns that uniquely identify the record throughout its lifetime"
        }
      }
    },
    "Snapshot": {
      "description": "Snapshot merge strategy.\n\nThis strategy can be used for data dumps that are taken periodical\nand contain only the latest state of the observed entity or system.\nOver time such dumps can have new rows added, and old rows either removed\nor modified.\n\nThis strategy transforms snapshot data into an append-only event stream\nwhere data already added is immutable. It does so by treating rows in\nsnapshots as \"observation\" events and adding an \"observed\" column\nthat will contain:\n  - \"I\" - when a row appears for the first time\n  - \"D\" - when row disappears\n  - \"U\" - whenever any row data has changed\n\nIt relies on a user-specified primary key columns to correlate the rows\nbetween the two snapshots.\n\nThe time when a snapshot was taken (event time) is usually captured in some\nform of metadata (e.g. in the name of the snapshot file, or in the caching\nheaders). In order to populate the event time we rely on the `FetchStep`\nto extract the event time from metadata. User then should specify the name\nof the event time column that will be populated from this value.\n\nIf the data contains a column that is guaranteed to change whenever\nany of the data columns changes (for example this can be a last\nmodification timestamp, an incremental version, or a data hash), then\nit can be specified as modification indicator to speed up the detection of\nmodified rows.\n\nSchema Changes:\n\nThis strategy will always preserve all columns from the existing and new snapshots, so the set of columns can only grow.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "primaryKey"
      ],
      "properties": {
        "primaryKey": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns that uniquely identify the record throughout its lifetime."
        },
        "compareColumns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the columns to compared to determine if a row has changed between two snapshots."
        },
        "observationColumn": {
          "type": "string",
          "description": "Name of the observation type column that will be added to the data."
        },
        "obsvAdded": {
          "type": "string",
          "description": "Name of the observation type when the data with certain primary key is seen for the first time."
        },
        "obsvChanged": {
          "type": "string",
          "description": "Name of the observation type when the data with certain primary key has changed compared to the last time it was seen."
        },
        "obsvRemoved": {
          "type": "string",
          "description": "Name of the observation type when the data with certain primary key has been seen before but now is missing from the snapshot."
        }
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/$defs/Append"
    },
    {
      "$ref": "#/$defs/Ledger"
    },
    {
      "$ref": "#/$defs/Snapshot"
    }
  ]
}