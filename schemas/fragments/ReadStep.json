{
  "$id": "http://open-data-fabric.github.com/schemas/ReadStep",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Defines how raw data should be read into the structured form.",
  "$defs": {
    "Csv": {
      "description": "Reader for comma-separated files.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A DDL-formatted schema. Schema can be used to coerce values into more appropriate data types."
        },
        "separator": {
          "type": "string",
          "description": "Sets a single character as a separator for each field and value."
        },
        "encoding": {
          "type": "string",
          "description": "Decodes the CSV files by the given encoding type."
        },
        "quote": {
          "type": "string",
          "description": "Sets a single character used for escaping quoted values where the separator can be part of the value. Set an empty string to turn off quotations."
        },
        "escape": {
          "type": "string",
          "description": "Sets a single character used for escaping quotes inside an already quoted value."
        },
        "comment": {
          "type": "string",
          "description": "Sets a single character used for skipping lines beginning with this character."
        },
        "header": {
          "type": "boolean",
          "description": "Use the first line as names of columns."
        },
        "enforceSchema": {
          "type": "boolean",
          "description": "If it is set to true, the specified or inferred schema will be forcibly applied to datasource files, and headers in CSV files will be ignored. If the option is set to false, the schema will be validated against all headers in CSV files in the case when the header option is set to true."
        },
        "inferSchema": {
          "type": "boolean",
          "description": "Infers the input schema automatically from data. It requires one extra pass over the data."
        },
        "ignoreLeadingWhiteSpace": {
          "type": "boolean",
          "description": "A flag indicating whether or not leading whitespaces from values being read should be skipped."
        },
        "ignoreTrailingWhiteSpace": {
          "type": "boolean",
          "description": "A flag indicating whether or not trailing whitespaces from values being read should be skipped."
        },
        "nullValue": {
          "type": "string",
          "description": "Sets the string representation of a null value."
        },
        "emptyValue": {
          "type": "string",
          "description": "Sets the string representation of an empty value."
        },
        "nanValue": {
          "type": "string",
          "description": "Sets the string representation of a non-number value."
        },
        "positiveInf": {
          "type": "string",
          "description": "Sets the string representation of a positive infinity value."
        },
        "negativeInf": {
          "type": "string",
          "description": "Sets the string representation of a negative infinity value."
        },
        "dateFormat": {
          "type": "string",
          "description": "Sets the string that indicates a date format."
        },
        "timestampFormat": {
          "type": "string",
          "description": "Sets the string that indicates a timestamp format."
        },
        "multiLine": {
          "type": "boolean",
          "description": "Parse one record, which may span multiple lines."
        }
      }
    },
    "JsonLines": {
      "description": "Reader for files containing concatenation of multiple JSON records with the same schema.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A DDL-formatted schema. Schema can be used to coerce values into more appropriate data types."
        },
        "dateFormat": {
          "type": "string",
          "description": "Sets the string that indicates a date format."
        },
        "encoding": {
          "type": "string",
          "description": "Allows to forcibly set one of standard basic or extended encoding."
        },
        "multiLine": {
          "type": "boolean",
          "description": "Parse one record, which may span multiple lines, per file."
        },
        "primitivesAsString": {
          "type": "boolean",
          "description": "Infers all primitive values as a string type."
        },
        "timestampFormat": {
          "type": "string",
          "description": "Sets the string that indicates a timestamp format."
        }
      }
    },
    "GeoJson": {
      "description": "Reader for GeoJSON files.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A DDL-formatted schema. Schema can be used to coerce values into more appropriate data types."
        }
      }
    },
    "EsriShapefile": {
      "description": "Reader for ESRI Shapefile format.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A DDL-formatted schema. Schema can be used to coerce values into more appropriate data types."
        },
        "subPath": {
          "type": "string",
          "description": "Path to a data file within a multi-file archive. Can contain glob patterns."
        }
      }
    },
    "Parquet": {
      "description": "Reader for Apache Parquet format.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A DDL-formatted schema. Schema can be used to coerce values into more appropriate data types."
        }
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/$defs/Csv"
    },
    {
      "$ref": "#/$defs/JsonLines"
    },
    {
      "$ref": "#/$defs/GeoJson"
    },
    {
      "$ref": "#/$defs/EsriShapefile"
    },
    {
      "$ref": "#/$defs/Parquet"
    }
  ]
}