{
  "$id": "http://open-data-fabric.github.com/schemas/FetchStep",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Defines the external source of data.",
  "$defs": {
    "Url": {
      "description": "Pulls data from one of the supported sources by its URL.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string",
          "format": "url",
          "description": "URL of the data source"
        },
        "eventTime": {
          "$ref": "/schemas/EventTimeSource",
          "description": "Describes how event time is extracted from the source metadata."
        },
        "cache": {
          "$ref": "/schemas/SourceCaching",
          "description": "Describes the caching settings used for this source."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "/schemas/RequestHeader"
          },
          "description": "Headers to pass during the request (e.g. HTTP Authorization)"
        }
      }
    },
    "FilesGlob": {
      "description": "Uses glob operator to match files on the local file system.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "Path with a glob pattern."
        },
        "eventTime": {
          "$ref": "/schemas/EventTimeSource",
          "description": "Describes how event time is extracted from the source metadata."
        },
        "cache": {
          "$ref": "/schemas/SourceCaching",
          "description": "Describes the caching settings used for this source."
        },
        "order": {
          "type": "string",
          "enumName": "SourceOrdering",
          "enum": [
            "byEventTime",
            "byName"
          ],
          "description": "Specifies how input files should be ordered before ingestion.\nOrder is important as every file will be processed individually\nand will advance the dataset's watermark."
        }
      }
    },
    "Container": {
      "description": "Runs the specified OCI container to fetch data from an arbitrary source.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string",
          "description": "Image name and and an optional tag."
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the entrypoint. Not executed within a shell. The default OCI image's ENTRYPOINT is used if this is not provided."
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments to the entrypoint. The OCI image's CMD is used if this is not provided."
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "/schemas/EnvVar"
          },
          "description": "Environment variables to propagate into or set in the container."
        }
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/$defs/Url"
    },
    {
      "$ref": "#/$defs/FilesGlob"
    },
    {
      "$ref": "#/$defs/Container"
    }
  ]
}